{"/home/travis/build/npmtest/node-npmtest-graph-json/test.js":"/* istanbul instrument in package npmtest_graph_json */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-graph-json/lib.npmtest_graph_json.js":"/* istanbul instrument in package npmtest_graph_json */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_graph_json = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_graph_json = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-graph-json/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-graph-json && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_graph_json */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_graph_json\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_graph_json.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_graph_json.rollup.js'] =\n            local.assetsDict['/assets.npmtest_graph_json.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_graph_json.__dirname + '/lib.npmtest_graph_json.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-graph-json/node_modules/graph-json/lib/graph.js":"/*global require, DirectedGraph, UndirectedGraph, nodes, edges, module*/\r\n\r\nvar util = require('util');\r\nvar fs = require('fs');\r\nvar JSV = require('JSV').JSV;\r\nvar validator = JSV.createEnvironment();\r\nvar scheme = require('./scheme.json');\r\nvar tsort = require('tsort');\r\n\r\nfunction ValidationError(message, err) {\r\n    'use strict';\r\n    Error.call(this);\r\n    this.err = err;\r\n}\r\nutil.inherits(ValidationError, Error);\r\n\r\nDirectedGraph.prototype.edgesIn = function (node) {\r\n    'use strict';\r\n    var t = (typeof node === 'string') ? this.getNode(node) : node;\r\n    return (\r\n        this.edges.filter(function (edge) {\r\n            return edge.to === t.name;\r\n        })\r\n    );\r\n};\r\n\r\nDirectedGraph.prototype.edgesOut = function (node) {\r\n    'use strict';\r\n    var t = (typeof node === 'string') ? this.getNode(node) : node;\r\n    return (\r\n        this.edges.filter(function (edge) {\r\n            return edge.from === t.name;\r\n        })\r\n    );\r\n};\r\n\r\nDirectedGraph.prototype.getNode = function (id) {\r\n    'use strict';\r\n    return (\r\n        this.nodes.filter(function (node) {\r\n            return node.name === id;\r\n        })[0]\r\n    );\r\n};\r\n\r\nDirectedGraph.prototype.numNodes = function () {\r\n    'use strict';\r\n    return nodes.length;\r\n};\r\n\r\nDirectedGraph.prototype.getEdge = function (id) {\r\n    'use strict';\r\n    return (\r\n        this.edges.filter(function (edge) {\r\n            return edge.name === id;\r\n        })[0]\r\n    );\r\n};\r\n\r\nDirectedGraph.prototype.numEdges = function () {\r\n    'use strict';\r\n    return edges.length;\r\n};\r\n\r\nDirectedGraph.prototype.edges = function() {\r\n    return edges;\r\n};\r\n\r\nDirectedGraph.prototype.isTerminal = function (node) {\r\n    'use strict';\r\n    return this.edgesOut(node).length === 0;\r\n};\r\n\r\nDirectedGraph.prototype.dfs = function (to_find, node, DirectedGraph) {\r\n    'use strict';\r\n    var t_1 = (typeof to_find === 'string') ? this.getNode(to_find) : to_find,\r\n        t_2 = (typeof node === 'string') ? this.getNode(node) : node,\r\n        edges_out = DirectedGraph.edgesOut(node),\r\n        children = [],\r\n        i = 0,\r\n        child,\r\n        found;\r\n\r\n    if (t_1 === undefined || t_2 === undefined) {\r\n        return null;\r\n    }\r\n\r\n    if (t_1.name === t_2.name) {\r\n        return t_1;\r\n    }\r\n\r\n    for (i = 0; i < edges_out.length; i += 1) {\r\n        children.push(edges_out[i].to);\r\n    }\r\n\r\n    for (i = 0; i < children.length; i += 1) {\r\n        child = children[i];\r\n        found = DirectedGraph.dfs(to_find, child, DirectedGraph);\r\n        if (found) {\r\n            return found;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\nDirectedGraph.prototype.bfs = function (to_find, node, DirectedGraph) {\r\n    'use strict';\r\n    //work on this next\r\n};\r\n\r\nfunction hangingEdges(DirectedGraph, edges) {\r\n    'use strict';\r\n    var err = [],\r\n        from,\r\n        to;\r\n    edges.forEach(function (edge) {\r\n        var from = DirectedGraph.getNode(edge.from),\r\n            to = DirectedGraph.getNode(edge.to);\r\n        if (!from || !to) {\r\n            err.push(edge);\r\n        }\r\n    });\r\n    return err;\r\n}\r\n\r\nDirectedGraph.prototype.addNode = function(name, dt) {\r\n    dt = (typeof dt === \"undefined\") ? null : dt;\r\n    var nstr;\r\n    if(dt === null) {\r\n        nstr = {\"name\" : name };\r\n    }\r\n    else {\r\n        nstr = {\"name\" : name, \"data\": dt};\r\n    }\r\n    this.nodes.push(nstr);\r\n};\r\n\r\nDirectedGraph.prototype.addEdge = function(name, from, to, dt) {\r\n    //data (dt) is optional\r\n    dt = (typeof dt === \"undefined\") ? null : dt;\r\n    var nstr;\r\n    if(dt === null) {\r\n        nstr = {\"name\": name,\"from\": from,\"to\": to};\r\n    }\r\n    else {\r\n        nstr = {\"name\": name,\"from\": from,\"to\": to,\"data\" : dt};\r\n    }\r\n    this.edges.push(nstr);\r\n    this.tDirectedGraph.add(from, to);\r\n}\r\n\r\nvar count = 0;\r\n// DirectedGraph.add('a', 'b', 'c', 'd');\r\nDirectedGraph.prototype.add = function() {\r\n    var nodes = [].slice.call(arguments, 0);\r\n    for (var i = 0, len = nodes.length; i < len; i++) {\r\n        //make the nodes if they don't exist and then make the edge from from and to\r\n        if (!this.getNode(nodes[i])) {\r\n            this.addNode(nodes[i]);\r\n        }\r\n        if (i > 0) {\r\n            this.addEdge('_e' + count, nodes[i - 1], nodes[i]);\r\n        }\r\n        count++;\r\n    }\r\n}\r\n\r\nDirectedGraph.prototype.tSort = function () {\r\n    return this.tDirectedGraph.sort();\r\n}\r\n\r\nDirectedGraph.prototype.isAcyclic = function () {\r\n    try {\r\n        this.tDirectedGraph.sort();\r\n    }\r\n    catch(e) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\n/*\r\nDirectedGraph.prototype.loadTasks = function() {\r\n    //assumes all nodes are tasks with values as processes\r\n    //next steps:\r\n    //  allow for specific nodes to be considered\r\n    //  allow for dependencies\r\n    //  throw special errors!\r\n    for(var i = 0; i<this.nodes.length; i++) {\r\n        var n = this.nodes[i];\r\n        var name = n.name;\r\n        var data = n.data || null; // or (typeof data === \"undefined\") ? null : data;\r\n        if(data != null && !orchestrator.hasTask(name)) {\r\n            //we have a new task, so add it to orchestrator\r\n            orchestrator.add(name, function() {\r\n                exec(data, function (error, stdout, stderr) {\r\n                    console.log('stdout: ' + stdout);\r\n                    console.log('stderr: ' + stderr);\r\n                    if (error !== null) {\r\n                      console.log('exec error: ' + error);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }\r\n}\r\n*/\r\n/*\r\n    you can now run tasks with\r\n    orchestrator.start('thing1', 'thing2', function (err) {\r\n        if(err) throw err;\r\n        //done!\r\n    });\r\n*/\r\n\r\nfunction areUq(arr, val) {\r\n    'use strict';\r\n    var ct = {},\r\n        dup = {};\r\n\r\n    arr.forEach(function (idx) {\r\n        var v = idx[val];\r\n        if (ct[v]) {\r\n            dup[v] = 1;\r\n        } else {\r\n            ct[v] = 1;\r\n        }\r\n    });\r\n\r\n    return Object.keys(dup);\r\n}\r\n\r\nDirectedGraph.errors = {\r\n    ValidationError: ValidationError\r\n};\r\n\r\nfunction DirectedGraph(struct) {\r\n    'use strict';\r\n\r\n    //having a structure is also optional\r\n    if (typeof struct !== \"undefined\") {\r\n        this.nodes = struct.nodes;\r\n        this.edges = struct.edges;\r\n    }\r\n    else {\r\n        this.nodes = [];\r\n        this.edges = [];\r\n    }\r\n\r\n    this.tDirectedGraph = tsort();\r\n\r\n    var test = validator.validate({nodes: this.nodes, edges: this.edges}, scheme),\r\n        uq = areUq(this.edges, 'name'),\r\n        x;\r\n\r\n    if (test.errors.length > 0) {\r\n        throw new ValidationError('Validation of DirectedGraph Failed: ', test.errors);\r\n    }\r\n\r\n    if (uq.length !== 0) {\r\n        throw new ValidationError('Duplicate Edges Found: ', uq);\r\n    }\r\n\r\n    x = hangingEdges(this, this.edges);\r\n    if (x.length !== 0) {\r\n        throw new ValidationError('Hanging Edges Found: ', x);\r\n    }\r\n\r\n    //initial edge adding to tDirectedGraph\r\n    for(var i = 0; i < this.edges.length; i++) {\r\n        var x = this.edges[i];\r\n        var fname = x.from;\r\n        var tname = x.to;\r\n        this.tDirectedGraph.add(fname, tname);\r\n    }\r\n}\r\n\r\n/*******************************UG**************************************/\r\n\r\n/*\r\n instead of edgesout and edgesin, need one function to get edges\r\n*/\r\nUndirectedGraph.prototype.getNode = function (id) {\r\n    'use strict';\r\n    return (\r\n        this.nodes.filter(function (node) {\r\n            return node.name === id;\r\n        })[0]\r\n    );\r\n};\r\n\r\nUndirectedGraph.prototype.numNodes = function () {\r\n    'use strict';\r\n    return nodes.length;\r\n};\r\n\r\nUndirectedGraph.prototype.getEdge = function (id) {\r\n    'use strict';\r\n    return (\r\n        this.edges.filter(function (edge) {\r\n            return edge.name === id;\r\n        })[0]\r\n    );\r\n};\r\n\r\nUndirectedGraph.prototype.getEdgeBetween = function (node1, node2) {\r\n    return (\r\n        this.edges.filter(function (edge) {\r\n            return edge.between[0] === node1 && edge.between[1] === node2;\r\n        })[0]\r\n    );\r\n};\r\n\r\nUndirectedGraph.prototype.numEdges = function () {\r\n    'use strict';\r\n    return edges.length;\r\n};\r\n\r\nUndirectedGraph.prototype.edges = function() {\r\n    return edges;\r\n};\r\n\r\nUndirectedGraph.prototype.addNode = function(name, dt) {\r\n    dt = (typeof dt === \"undefined\") ? null : dt;\r\n    var nstr;\r\n    if(dt === null) {\r\n        nstr = {\"name\" : name };\r\n    }\r\n    else {\r\n        nstr = {\"name\" : name, \"data\": dt};\r\n    }\r\n    this.nodes.push(nstr);\r\n};\r\n\r\n/*\r\nimportant - edge structure is NOT the same as DAG\r\nbetween is an array of two nodes- the nodes that the edges connect.\r\n*/\r\nUndirectedGraph.prototype.addEdge = function(name, n1, n2, dt) {\r\n    //data (dt) is optional\r\n    dt = (typeof dt === \"undefined\") ? null : dt;\r\n    var nstr;\r\n    if(dt === null) {\r\n        nstr = {\"name\": name,\"between\": [n1, n2]};\r\n    }\r\n    else {\r\n        nstr = {\"name\": name,\"between\": [n1, n2], \"data\" : dt};\r\n    }\r\n    this.edges.push(nstr);\r\n}\r\n\r\nvar count = 0;\r\n// UndirectedGraph.add('a', 'b', 'c', 'd');\r\nUndirectedGraph.prototype.add = function() {\r\n    var nodes = [].slice.call(arguments, 0);\r\n    for (var i = 0, len = nodes.length; i < len; i++) {\r\n        //make the nodes if they don't exist and then make the edge from from and to\r\n        if (!this.getNode(nodes[i])) {\r\n            this.addNode(nodes[i]);\r\n        }\r\n        if (i > 0) {\r\n            this.addEdge('_e' + count, nodes[i - 1], nodes[i]);\r\n        }\r\n        count++;\r\n    }\r\n}\r\n\r\nfunction areUq(arr, val) {\r\n    'use strict';\r\n    var ct = {},\r\n        dup = {};\r\n\r\n    arr.forEach(function (idx) {\r\n        var v = idx[val];\r\n        if (ct[v]) {\r\n            dup[v] = 1;\r\n        } else {\r\n            ct[v] = 1;\r\n        }\r\n    });\r\n\r\n    return Object.keys(dup);\r\n}\r\n\r\nUndirectedGraph.errors = {\r\n    ValidationError: ValidationError\r\n};\r\n\r\n// TODO: add validation of an UndirectedGraph\r\nfunction UndirectedGraph(struct) {\r\n    'use strict';\r\n\r\n    //having a structure is also optional\r\n    if (typeof struct !== \"undefined\") {\r\n        this.nodes = struct.nodes;\r\n        this.edges = struct.edges;\r\n    }\r\n    else {\r\n        this.nodes = [];\r\n        this.edges = [];\r\n    }\r\n\r\n    //need to add a scheme validator\r\n    var uq = areUq(this.edges, 'name');\r\n\r\n    if (uq.length !== 0) {\r\n        throw new ValidationError('Duplicate Edges Found: ', uq);\r\n    }\r\n}\r\n\r\n//module exports\r\nmodule.exports.DirectedGraph = DirectedGraph;\r\nmodule.exports.DG = DirectedGraph;\r\nmodule.exports.UndirectedGraph = UndirectedGraph;\r\nmodule.exports.UG = UndirectedGraph;\r\n"}